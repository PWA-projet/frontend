import { Injectable } from '@angular/core';
import { environment } from '../environments/environment.dev';
import { Observable } from 'rxjs';
import { MessageI } from '../models/message.model';
import { io, Socket } from 'socket.io-client';

@Injectable({
  providedIn: 'root',
})
export class SocketService {
  private readonly socket: Socket;

  constructor() {
    this.socket = io(environment.apiUrl);

    this.socket.on('connect', () => {
      console.log('âœ… ConnectÃ© au serveur WebSocket !');
    });

    // ğŸ”¹ Afficher tous les Ã©vÃ©nements WebSocket reÃ§us
    this.socket.onAny((event, ...args) => {
      console.log(`ğŸ“© Ã‰vÃ©nement WebSocket reÃ§u: ${event}`, args);
    });

    this.socket.on('newMessage', (message) => {
      console.log('ğŸ“¥ Nouveau message reÃ§u via WebSocket:', message);
    });
  }

  /**
   * Rejoint un canal spÃ©cifique
   */
  joinChannel(channelId: string): void {
    console.log(`ğŸ”¹ Demande de rejoindre le canal: ${channelId}`);
    this.socket.emit("joinChannel", channelId);

    // VÃ©rifier que le serveur rÃ©pond
    this.socket.on("joinedChannel", (data) => {
      console.log(`âœ… Confirmation: L'utilisateur a bien rejoint le canal ${data.channelId}`);
    });
  }

  /**
   * Ã‰coute les nouveaux messages reÃ§us via WebSocket
   */
  receiveMessages(): Observable<any> {
    return new Observable(observer => {
      this.socket.on('newMessage', (message) => {
        console.log('ğŸ“¥ Nouveau message reÃ§u:', message); // VÃ©rifie si Ã§a s'affiche
        observer.next(message);
      });
    });
  }

  /**
   * Envoie un message au serveur WebSocket
   */
  sendMessage(message: MessageI): void {
    console.log('ğŸ“¤ Envoi du message:', message);
    this.socket.emit('newMessage', message);
  }
}
